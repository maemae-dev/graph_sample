directive @cypher(statement: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @relation(name: String, direction: _RelationDirections, from: String, to: String) on FIELD_DEFINITION | OBJECT

directive @additionalLabels(labels: [String]) on OBJECT

directive @MutationMeta(relationship: String, from: String, to: String) on FIELD_DEFINITION

directive @neo4j_ignore on FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @unique on FIELD_DEFINITION

directive @index on FIELD_DEFINITION

directive @search(index: String) on FIELD_DEFINITION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type _AddUserWorksPayload {
  """
  Field for the User node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is coming from.
  """
  from: User

  """
  Field for the Company node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is going to.
  """
  to: Company
}

type _RemoveUserWorksPayload {
  """
  Field for the User node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is coming from.
  """
  from: User

  """
  Field for the Company node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is going to.
  """
  to: Company
}

type _MergeUserWorksPayload {
  """
  Field for the User node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is coming from.
  """
  from: User

  """
  Field for the Company node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is going to.
  """
  to: Company
}

input _UserInput {
  name: String!
}

enum _UserOrdering {
  _id_asc
  _id_desc
  name_asc
  name_desc
}

input _UserFilter {
  AND: [_UserFilter!]
  OR: [_UserFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_regexp: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  works: _CompanyFilter
  works_not: _CompanyFilter
  works_in: [_CompanyFilter!]
  works_not_in: [_CompanyFilter!]
  works_some: _CompanyFilter
  works_none: _CompanyFilter
  works_single: _CompanyFilter
  works_every: _CompanyFilter
}

type User {
  """
  Generated field for querying the Neo4j [system id](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-id) of this node.
  """
  _id: String
  name: String!
  works(first: Int, offset: Int, orderBy: [_CompanyOrdering], filter: _CompanyFilter): [Company]
}

type _AddCompanyEmployeePayload {
  """
  Field for the User node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is coming from.
  """
  from: User

  """
  Field for the Company node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is going to.
  """
  to: Company
}

type _RemoveCompanyEmployeePayload {
  """
  Field for the User node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is coming from.
  """
  from: User

  """
  Field for the Company node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is going to.
  """
  to: Company
}

type _MergeCompanyEmployeePayload {
  """
  Field for the User node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is coming from.
  """
  from: User

  """
  Field for the Company node this WORKS [relationship](https://grandstack.io/docs/graphql-relationship-types) is going to.
  """
  to: Company
}

input _CompanyInput {
  name: String!
}

enum _CompanyOrdering {
  name_asc
  name_desc
  _id_asc
  _id_desc
}

input _CompanyFilter {
  AND: [_CompanyFilter!]
  OR: [_CompanyFilter!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_regexp: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  employee: _UserFilter
  employee_not: _UserFilter
  employee_in: [_UserFilter!]
  employee_not_in: [_UserFilter!]
  employee_some: _UserFilter
  employee_none: _UserFilter
  employee_single: _UserFilter
  employee_every: _UserFilter
}

type Company {
  name: String!
  employee(first: Int, offset: Int, orderBy: [_UserOrdering], filter: _UserFilter): [User]

  """
  Generated field for querying the Neo4j [system id](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-id) of this node.
  """
  _id: String
}

"""
Generated Time input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) Time value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/time/#functions-time-create-string).
  """
  formatted: String
}

"""
Generated Time object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) Time value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated Date input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) Date value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/date/#functions-date-create-string).
  """
  formatted: String
}

"""
Generated Date object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jDate {
  year: Int
  month: Int
  day: Int

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) Date value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated DateTime input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) DateTime value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/datetime/#functions-datetime-create-string).
  """
  formatted: String
}

"""
Generated DateTime object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) DateTime value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated LocalTime input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jLocalTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) LocalTime value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/localtime/#functions-localtime-create-string).
  """
  formatted: String
}

"""
Generated LocalTime object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jLocalTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) LocalTime value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated LocalDateTime input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jLocalDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) LocalDateTime value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/localdatetime/#functions-localdatetime-create-string).
  """
  formatted: String
}

"""
Generated LocalDateTime object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jLocalDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) LocalDateTime value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

input _Neo4jPointDistanceFilter {
  point: _Neo4jPointInput!
  distance: Float!
}

"""
Generated Point input object for Neo4j [Spatial field arguments](https://grandstack.io/docs/graphql-spatial-types/#point-query-arguments).
"""
input _Neo4jPointInput {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

"""
Generated Point object type for Neo4j [Spatial fields](https://grandstack.io/docs/graphql-spatial-types#using-point-in-queries).
"""
type _Neo4jPoint {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

enum _RelationDirections {
  IN
  OUT
}

type Query {
  """
  [Generated query](https://grandstack.io/docs/graphql-schema-generation-augmentation#generated-queries) for User type nodes.
  """
  User(_id: ID, name: String, first: Int, offset: Int, orderBy: [_UserOrdering], filter: _UserFilter): [User]

  """
  [Generated query](https://grandstack.io/docs/graphql-schema-generation-augmentation#generated-queries) for Company type nodes.
  """
  Company(name: String, _id: String, first: Int, offset: Int, orderBy: [_CompanyOrdering], filter: _CompanyFilter): [Company]
}

type Mutation {
  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/##add--remove-relationship) for [creating](https://neo4j.com/docs/cypher-manual/4.1/clauses/create/#create-relationships) the WORKS relationship.
  """
  AddUserWorks(from: _UserInput!, to: _CompanyInput!): _AddUserWorksPayload

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/##add--remove-relationship) for [deleting](https://neo4j.com/docs/cypher-manual/4.1/clauses/delete/#delete-delete-relationships-only) the WORKS relationship.
  """
  RemoveUserWorks(from: _UserInput!, to: _CompanyInput!): _RemoveUserWorksPayload

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/##merge-relationship) for [merging](https://neo4j.com/docs/cypher-manual/4.1/clauses/merge/#query-merge-relationships) the WORKS relationship.
  """
  MergeUserWorks(from: _UserInput!, to: _CompanyInput!): _MergeUserWorksPayload

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/#create) for [creating](https://neo4j.com/docs/cypher-manual/4.1/clauses/create/#create-nodes) a User node.
  """
  CreateUser(name: String!): User

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/#delete) for [deleting](https://neo4j.com/docs/cypher-manual/4.1/clauses/delete/#delete-delete-single-node) a User node.
  """
  DeleteUser(name: String!): User

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/#merge) for [merging](https://neo4j.com/docs/cypher-manual/4.1/clauses/merge/#query-merge-node-derived) a User node.
  """
  MergeUser(name: String!): User

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/##add--remove-relationship) for [creating](https://neo4j.com/docs/cypher-manual/4.1/clauses/create/#create-relationships) the WORKS relationship.
  """
  AddCompanyEmployee(from: _UserInput!, to: _CompanyInput!): _AddCompanyEmployeePayload

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/##add--remove-relationship) for [deleting](https://neo4j.com/docs/cypher-manual/4.1/clauses/delete/#delete-delete-relationships-only) the WORKS relationship.
  """
  RemoveCompanyEmployee(from: _UserInput!, to: _CompanyInput!): _RemoveCompanyEmployeePayload

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/##merge-relationship) for [merging](https://neo4j.com/docs/cypher-manual/4.1/clauses/merge/#query-merge-relationships) the WORKS relationship.
  """
  MergeCompanyEmployee(from: _UserInput!, to: _CompanyInput!): _MergeCompanyEmployeePayload

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/#create) for [creating](https://neo4j.com/docs/cypher-manual/4.1/clauses/create/#create-nodes) a Company node.
  """
  CreateCompany(name: String!): Company

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/#delete) for [deleting](https://neo4j.com/docs/cypher-manual/4.1/clauses/delete/#delete-delete-single-node) a Company node.
  """
  DeleteCompany(name: String!): Company

  """
  [Generated mutation](https://grandstack.io/docs/graphql-schema-generation-augmentation/#merge) for [merging](https://neo4j.com/docs/cypher-manual/4.1/clauses/merge/#query-merge-node-derived) a Company node.
  """
  MergeCompany(name: String!): Company
}
